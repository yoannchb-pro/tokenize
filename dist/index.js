!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Tokenizer=t()}(this,(function(){"use strict";const e={defaultType:"UNKNOWN",concatDefaultType:!0,prioritize:!0};class t{constructor(t){if(!t||!t.tokens)throw new Error('Invalide options: "tokens" is required');this.options=Object.assign({},e,t)}getDefaultType(){return this.options.defaultType}getTokens(){return this.options.tokens}getTokensName(){return[...Object.keys(this.options.tokens),this.getDefaultType()]}matcher(e,t,n){n.lastIndex=0;const o=n.exec(e);return o?{type:t,value:o[0],groups:o.groups,index:o.index}:null}tokenize(e){var t,n,o,s,i;if("string"!=typeof e)return[];const l=[],u=this.getDefaultType(),r=this.options.concatDefaultType,a=this.options.tokens;for(let p=0;p<e.length;++p){const c=e.substring(p,e.length),d=e.substring(0,p),h={type:u,value:c.charAt(0),index:0};let g=h;const f=Object.entries(a).reverse();for(const[e,t]of f){const n=this.matcher(c,e,t);null!==n&&(0===n.index?g=n:this.options.prioritize&&g!==h&&g.value.length>n.index&&(g=h))}const T=g.value.split(/\n/g),y=null!==(n=null===(t=d.match(/\n/g))||void 0===t?void 0:t.length)&&void 0!==n?n:0,v=y+Math.max(T.length-1,0),E=null!==(i=null===(s=null===(o=d.split(/\n/g))||void 0===o?void 0:o[y])||void 0===s?void 0:s.length)&&void 0!==i?i:0,N=T[T.length-1].length+(y===v?E:0);let k=Object.assign(Object.assign({type:g.type,value:g.value},g.groups?{groups:g.groups}:{}),{startLine:y,startColumn:E,endLine:v,endColumn:N});if(k=this.options.callback?this.options.callback(k,l):k,p+=g.value.length-1,null===k)continue;if(!this.options.authorizeAdditionalTokens&&!this.getTokensName().includes(k.type))throw new Error(`Unknown token type returned by the callback: "${k.type}" (If you want to allow other types please set authorizeAdditionalTokens to true)`);const I=k.type===u;if(r&&I&&0!==l.length&&l[l.length-1].type===u){const e=l[l.length-1];e.value+=k.value,e.endColumn=k.endColumn,e.endLine=k.endLine}else l.push(k)}return l}}return t.BUILT_IN_RULES={WORD:/\w+/,NUMBER:/\d+(?:\.\d+)?/,ONE_LINE_COMMENT:/\/\/.*/,MULTIPLE_LINE_COMMENT:/\/\*[\s\S]*?\*\//,STRING:/("|'|`)(?<content>(?:\\\1|.)*?)\1/,DOUBLE_QUOTE_STRING:/(")(?<content>(?:\\\1|.)*?)\1/,SINGLE_QUOTE_STRING:/(')(?<content>(?:\\\1|.)*?)\1/,GRAVE_ACCENT_STRING:/(`)(?<content>(?:\\\1|.)*?)\1/,WHITE_SPACES:/\s+/,NEW_LINES:/\n+/},t}));
//# sourceMappingURL=index.js.map
